<?php
/**
 * Laravel Migration Generator
 * Generates Laravel migration files from database tables
 */

class LaravelMigrationGenerator {
    private $conn;
    
    public function __construct($conn) {
        $this->conn = $conn;
    }
    
    /**
     * Generate migration for a specific table
     */
    public function generateTableMigration($database, $table) {
        $this->conn->exec("USE `$database`");
        
        // Get table structure
        $columns = $this->getTableColumns($table);
        $indexes = $this->getTableIndexes($table);
        $foreignKeys = $this->getForeignKeys($table);
        
        // Generate migration class name
        $className = 'Create' . $this->toPascalCase($table) . 'Table';
        $timestamp = date('Y_m_d_His');
        $fileName = $timestamp . '_create_' . strtolower($table) . '_table.php';
        
        // Build migration content
        $migration = $this->buildMigration($className, $table, $columns, $indexes, $foreignKeys);
        
        return [
            'filename' => $fileName,
            'content' => $migration
        ];
    }
    
    /**
     * Generate migrations for entire database
     */
    public function generateDatabaseMigrations($database) {
        $this->conn->exec("USE `$database`");
        
        // Get all tables
        $stmt = $this->conn->query("SHOW TABLES");
        $tables = $stmt->fetchAll(PDO::FETCH_COLUMN);
        
        $migrations = [];
        $timestamp = strtotime('now');
        
        foreach ($tables as $index => $table) {
            // Increment timestamp for each table to ensure proper order
            $currentTimestamp = date('Y_m_d_His', $timestamp + $index);
            
            $columns = $this->getTableColumns($table);
            $indexes = $this->getTableIndexes($table);
            $foreignKeys = $this->getForeignKeys($table);
            
            $className = 'Create' . $this->toPascalCase($table) . 'Table';
            $fileName = $currentTimestamp . '_create_' . strtolower($table) . '_table.php';
            
            $migrations[] = [
                'filename' => $fileName,
                'content' => $this->buildMigration($className, $table, $columns, $indexes, $foreignKeys)
            ];
        }
        
        return $migrations;
    }
    
    /**
     * Get table columns with their properties
     */
    private function getTableColumns($table) {
        $stmt = $this->conn->query("DESCRIBE `$table`");
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }
    
    /**
     * Get table indexes
     */
    private function getTableIndexes($table) {
        $stmt = $this->conn->query("SHOW INDEXES FROM `$table`");
        $indexes = $stmt->fetchAll(PDO::FETCH_ASSOC);
        
        // Group by index name
        $grouped = [];
        foreach ($indexes as $index) {
            $name = $index['Key_name'];
            if (!isset($grouped[$name])) {
                $grouped[$name] = [
                    'name' => $name,
                    'unique' => $index['Non_unique'] == 0,
                    'primary' => $name === 'PRIMARY',
                    'columns' => []
                ];
            }
            $grouped[$name]['columns'][] = $index['Column_name'];
        }
        
        return array_values($grouped);
    }
    
    /**
     * Get foreign keys
     */
    private function getForeignKeys($table) {
        $stmt = $this->conn->prepare("
            SELECT 
                CONSTRAINT_NAME,
                COLUMN_NAME,
                REFERENCED_TABLE_NAME,
                REFERENCED_COLUMN_NAME
            FROM information_schema.KEY_COLUMN_USAGE
            WHERE TABLE_SCHEMA = DATABASE()
                AND TABLE_NAME = :table
                AND REFERENCED_TABLE_NAME IS NOT NULL
        ");
        $stmt->execute([':table' => $table]);
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }
    
    /**
     * Build migration file content
     */
    private function buildMigration($className, $table, $columns, $indexes, $foreignKeys) {
        $upMethod = $this->buildUpMethod($table, $columns, $indexes, $foreignKeys);
        $downMethod = $this->buildDownMethod($table);
        
        return <<<PHP
<?php
/**
 * Migration: $className
 * Generated by Medians Database Manager
 */
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
$upMethod
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
$downMethod
    }
};
PHP;
    }
    
    /**
     * Build up method content
     */
    private function buildUpMethod($table, $columns, $indexes, $foreignKeys) {
        $lines = ["        Schema::create('$table', function (Blueprint \$table) {"];
        
        // Add columns
        foreach ($columns as $column) {
            $columnDef = $this->mapColumnToLaravel($column);
            if ($columnDef) {
                $lines[] = "            " . $columnDef;
            }
        }
        
        // Add indexes (excluding primary key)
        foreach ($indexes as $index) {
            if ($index['primary']) {
                continue; // Primary key is handled in column definition
            }
            
            $columnsStr = "'" . implode("', '", $index['columns']) . "'";
            if ($index['unique']) {
                $lines[] = "            \$table->unique([$columnsStr]);";
            } else {
                $lines[] = "            \$table->index([$columnsStr]);";
            }
        }
        
        // Add foreign keys
        foreach ($foreignKeys as $fk) {
            $onUpdate = strtolower($fk['UPDATE_RULE'] ?? '');
            $onDelete = strtolower($fk['DELETE_RULE'] ?? '');
            
            $fkDef = "\$table->foreign('{$fk['COLUMN_NAME']}')";
            $fkDef .= "->references('{$fk['REFERENCED_COLUMN_NAME']}')";
            $fkDef .= "->on('{$fk['REFERENCED_TABLE_NAME']}')";
            
            if ($onUpdate !== 'restrict') {
                $onUpdate = str_replace(' ', '', $onUpdate);
                $fkDef .= "->onUpdate('$onUpdate')";
            }
            if ($onDelete !== 'restrict') {
                $onDelete = str_replace(' ', '', $onDelete);
                $fkDef .= "->onDelete('$onDelete')";
            }
            
            $lines[] = "            " . $fkDef . ";";
        }
        
        $lines[] = "        });";
        
        return implode("\n", $lines);
    }
    
    /**
     * Build down method content
     */
    private function buildDownMethod($table) {
        return "        Schema::dropIfExists('$table');";
    }
    
    /**
     * Map MySQL column to Laravel migration method
     */
    private function mapColumnToLaravel($column) {
        $field = $column['Field'];
        $type = strtolower($column['Type']);
        $null = $column['Null'] === 'YES';
        $default = $column['Default'];
        $extra = strtolower($column['Extra']);
        $key = $column['Key'];
        
        // Primary key with auto increment
        if ($key === 'PRI' && strpos($extra, 'auto_increment') !== false) {
            if (strpos($type, 'bigint') !== false) {
                return "\$table->id('$field');";
            } else {
                return "\$table->id('$field')->change();";
            }
        }
        
        // Extract length/precision from type
        preg_match('/([a-z]+)(\(([0-9,]+)\))?/', $type, $matches);
        $baseType = $matches[1];
        $params = isset($matches[3]) ? $matches[3] : null;
        
        // Map to Laravel types
        $laravelMethod = null;
        
        switch ($baseType) {
            case 'tinyint':
                if ($params === '1') {
                    $laravelMethod = "\$table->boolean('$field')";
                } else {
                    $laravelMethod = "\$table->tinyInteger('$field')";
                }
                break;
            case 'smallint':
                $laravelMethod = "\$table->smallInteger('$field')";
                break;
            case 'mediumint':
                $laravelMethod = "\$table->mediumInteger('$field')";
                break;
            case 'int':
            case 'integer':
                $laravelMethod = "\$table->integer('$field')";
                break;
            case 'bigint':
                $laravelMethod = "\$table->bigInteger('$field')";
                break;
            case 'float':
                $laravelMethod = "\$table->float('$field')";
                break;
            case 'double':
                $laravelMethod = "\$table->double('$field')";
                break;
            case 'decimal':
                if ($params) {
                    $laravelMethod = "\$table->decimal('$field', " . str_replace(',', ', ', $params) . ")";
                } else {
                    $laravelMethod = "\$table->decimal('$field')";
                }
                break;
            case 'varchar':
                $laravelMethod = "\$table->string('$field'" . ($params ? ", $params" : "") . ")";
                break;
            case 'char':
                $laravelMethod = "\$table->char('$field'" . ($params ? ", $params" : "") . ")";
                break;
            case 'text':
                $laravelMethod = "\$table->text('$field')";
                break;
            case 'mediumtext':
                $laravelMethod = "\$table->mediumText('$field')";
                break;
            case 'longtext':
                $laravelMethod = "\$table->longText('$field')";
                break;
            case 'json':
                $laravelMethod = "\$table->json('$field')";
                break;
            case 'date':
                $laravelMethod = "\$table->date('$field')";
                break;
            case 'datetime':
                $laravelMethod = "\$table->dateTime('$field')";
                break;
            case 'timestamp':
                $laravelMethod = "\$table->timestamp('$field')";
                break;
            case 'time':
                $laravelMethod = "\$table->time('$field')";
                break;
            case 'year':
                $laravelMethod = "\$table->year('$field')";
                break;
            case 'enum':
                // Extract enum values
                preg_match('/enum\((.*)\)/', $type, $enumMatches);
                if (isset($enumMatches[1])) {
                    $laravelMethod = "\$table->enum('$field', [" . $enumMatches[1] . "])";
                }
                break;
            case 'blob':
            case 'binary':
                $laravelMethod = "\$table->binary('$field')";
                break;
            default:
                $laravelMethod = "\$table->string('$field')";
        }
        
        if (!$laravelMethod) {
            return null;
        }
        
        // Add modifiers
        if (strpos($extra, 'unsigned') !== false) {
            $laravelMethod .= "->unsigned()";
        }
        
        if ($null) {
            $laravelMethod .= "->nullable()";
        }
        
        if ($default !== null) {
            if ($default === 'CURRENT_TIMESTAMP' || $default === 'current_timestamp()') {
                $laravelMethod .= "->useCurrent()";
            } else if (is_numeric($default)) {
                $laravelMethod .= "->default($default)";
            } else {
                $laravelMethod .= "->default('" . addslashes($default) . "')";
            }
        }
        
        if (strpos($extra, 'on update current_timestamp') !== false) {
            $laravelMethod .= "->useCurrentOnUpdate()";
        }
        
        return $laravelMethod . ";";
    }
    
    /**
     * Convert string to PascalCase
     */
    private function toPascalCase($string) {
        return str_replace(' ', '', ucwords(str_replace('_', ' ', $string)));
    }
}
